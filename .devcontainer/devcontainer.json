// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.205.1/containers/docker-existing-dockerfile
{
	"name": "Existing Dockerimage",
	// "image": "ubuntu-vcpkg",
	// Sets the run context to one level up instead of the .devcontainer folder.
	"context": "..",
	// Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.
	"dockerFile": "../Dockerfile.debian",
	// use vcpkg/final target for manual testing
	"build": {
		"target": "vcpkg"
	},
	"customizations": {
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {},
			// Add the IDs of extensions you want installed when the container is created.
			"extensions": [
				"ms-vscode.cmake-tools",
				"fredericbonnet.cmake-test-adapter",
				"twxs.cmake",
				"ms-vscode.cpptools-extension-pack",
				"eamodio.gitlens",
				"ms-azuretools.vscode-docker"
			]
		}
	},
	"workspaceFolder": "/workspace",
	"workspaceMount": "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached",
	// "containerEnv": { "VCPKG_BINARY_SOURCES": "clear;/" }
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],
	// Uncomment the next line to run commands after the container is created - for example installing curl.
	// "postCreateCommand": "apt-get update && apt-get install -y curl",
	// Uncomment when using a ptrace-based debugger like C++, Go, and Rust
	// "runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined" ],
	// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker.
	// "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind" ],
	// Uncomment to connect as a non-root user if you've added one. See https://aka.ms/vscode-remote/containers/non-root.
	// "remoteUser": "vscode"
}